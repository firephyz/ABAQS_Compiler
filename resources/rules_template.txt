/** File generated by ABAQS_Compiler. Original form accompanied
 *  with the license below.
 */

<<<>>>

/** @module : cell_rules
 *  @author : Adaptive & Secure Computing Systems (ASCS) Laboratory

 *  Copyright (c) 2018 ABAQS (ASCS/ECE/BU)
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.

 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

<<<>>>

module cell_rules #(
  parameter BIT_WIDTH      = 32,                   // Bit width of the data
  parameter NUM_REGS       = 4,                    // Number of registers to store variables or data
  parameter NUM_BITS       = NUM_REGS * BIT_WIDTH, // Number of bits in all data regs
  parameter TYPE_BIT_WIDTH = 1,                    // Number of bits in the cell type register
  parameter RULE_DELAY     = 1                     // Number of clock cycles needed for valid rule output
)(

<<<>>>

  input clock,
  input reset_n,

  input [BIT_WIDTH-1:0] space_data_in,
  input [NUM_BITS-1:0] cell_state_in,
  input [TYPE_BIT_WIDTH-1:0] type_in,
  output [NUM_BITS-1:0] cell_state_out,
  output reg [BIT_WIDTH-1:0] quantity, // The ammount of chemical secreted by the cell

  output move_rq,                      // Move if adjacent space is open
  output [1:0] move_direction          // 0x0 = N, 0x1 = S, 0x2 = E, 0x3 = W

);

<<<>>>

// This is the array that holds NUM_REGS many variables, each with a bit width
// of BIT_WIDTH.
wire [BIT_WIDTH-1:0] cell_state_in_array [NUM_REGS-1:0];
reg [BIT_WIDTH-1:0] cell_state_out_array [NUM_REGS-1:0];

// This generate block breaks cell_state_in up into individual regs and assigns
// them to an array so they can be accessed easier. It also groups the array
// back into a single vector that is used as an output
genvar i;
generate
for(i = 0; i < NUM_REGS; i=i+1) begin : connect_cell_state
  assign cell_state_in_array[i] = cell_state_in[(BIT_WIDTH*(i+1))-1:i*BIT_WIDTH];
  assign cell_state_out[(BIT_WIDTH*(i+1))-1:i*BIT_WIDTH] = cell_state_out_array[i];
end
endgenerate

<<<>>>

endmodule